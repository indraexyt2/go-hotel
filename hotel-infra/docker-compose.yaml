networks:
  hotel:
    driver: bridge
  kafka_network:
    driver: bridge
  redis_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.38.0.0/16
          gateway: 172.38.0.1

services:
  hotel-ums:
    container_name: hotel-ums
    build: ../hotel-ums
    image: hotel-ums:1.0.0
    ports:
      - "8080:8080"
    networks:
      - hotel
      - redis_network
    depends_on:
      - postgres
      - redis-setup
    environment:
      - APP_NAME=UMS
      - UMS_APP_PORT=8080
      - UMS_DB_HOST=postgres
      - UMS_DB_PORT=5432
      - UMS_DB_USER=postgres
      - UMS_DB_PASSWORD=postgres
      - UMS_DB_NAME=hotel_ums
      - REDIS_HOST=redis-1:6379,redis-2:6379,redis-3:6379,redis-4:6379,redis-5:6379,redis-6:6379
      - UMS_JWT_SECRET_KEY=secret
      - GOOGLE_CLIENT_ID=your_google_client_id
      - GOOGLE_CLIENT_SECRET=your_google_client_secret

  hotel-room:
    container_name: hotel-room
    build: ../hotel-rooms
    image: hotel-room:1.0.0
    ports:
      - "8081:8081"
    networks:
      - hotel
      - redis_network
    depends_on:
      - postgres
      - redis-setup
    environment:
      - APP_NAME=ROOM
      - ROOM_APP_PORT=8081
      - ROOM_DB_HOST=postgres
      - ROOM_DB_PORT=5432
      - ROOM_DB_USER=postgres
      - ROOM_DB_PASSWORD=postgres
      - ROOM_DB_NAME=hotel_room
      - REDIS_HOST=redis-1:6379,redis-2:6379,redis-3:6379,redis-4:6379,redis-5:6379,redis-6:6379
      - UMS_URL_USER=http://hotel-ums:8080/api/ums/v1/user
      - BOOKING_URL_TOTAL_BOOKED=http://hotel-booking:8082/api/booking/v1/total-booked

  hotel-booking:
    container_name: hotel-booking
    build: ../hotel-bookings
    image: hotel-booking:1.0.0
    ports:
      - "8082:8082"
    networks:
      - hotel
      - redis_network
      - kafka_network
    depends_on:
      - postgres
      - redis-setup
    environment:
      - APP_NAME=BOOKING
      - BOOKING_APP_PORT=8082
      - BOOKING_DB_HOST=postgres
      - BOOKING_DB_PORT=5432
      - BOOKING_DB_USER=postgres
      - BOOKING_DB_PASSWORD=postgres
      - BOOKING_DB_NAME=hotel_booking
      - REDIS_HOST=redis-1:6379,redis-2:6379,redis-3:6379,redis-4:6379,redis-5:6379,redis-6:6379
      - KAFKA_HOSTS=kafka1:9092,kafka2:9092,kafka3:9092
      - KAFKA_TOPIC_INITIATE_BOOKING=NEW_BOOKING
      - BOOKING_SECRET_KEY=secret
      - UMS_URL_USER=http://hotel-ums:8080/api/ums/v1/user

  hotel-payment:
    container_name: hotel-payment
    build: ../hotel-payments
    image: hotel-payment:1.0.0
    ports:
      - "8083:8083"
    networks:
      - hotel
      - redis_network
      - kafka_network
    depends_on:
      - postgres
      - redis-setup
    environment:
      - APP_NAME=PAYMENT
      - ENV_MODE=sandbox
      - PAYMENT_APP_PORT=8083
      - PAYMENT_DB_HOST=postgres
      - PAYMENT_DB_PORT=5432
      - PAYMENT_DB_USER=postgres
      - PAYMENT_DB_PASSWORD=postgres
      - PAYMENT_DB_NAME=hotel_payment
      - REDIS_HOST=redis-1:6379,redis-2:6379,redis-3:6379,redis-4:6379,redis-5:6379,redis-6:6379
      - KAFKA_HOSTS=kafka1:9092,kafka2:9092,kafka3:9092
      - KAFKA_TOPIC_INITIATE_BOOKING=NEW_BOOKING
      - BOOKING_SECRET_KEY=secret
      - UMS_URL_USER=http://hotel-ums:8080/api/ums/v1/user
      - BOOKING_URL_UPDATE_STATUS=http://hotel-booking:8082/api/booking/v1/bookings/%s/status
      - MIDTRANS_SERVER_KEY=your_midtrans_server_key
      - MIDTRANS_CLIENT_KEY=your_midtrans_client_key

  redis-1:
    image: redis
    container_name: redis-1
    command: [ "redis-server","/usr/local/etc/redis/redis.conf" ]
    volumes:
      - redis1:/data
      - ./redis/node-1/conf/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - 6371:6379
      - 16371:16379
    networks:
      redis_network:
        ipv4_address: 172.38.0.11

  redis-2:
    image: redis
    container_name: redis-2
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - redis2:/data
      - ./redis/node-2/conf/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6372:6379"
      - 16372:16379
    networks:
      redis_network:
        ipv4_address: 172.38.0.12

  redis-3:
    image: redis
    container_name: redis-3
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - redis3:/data
      - ./redis/node-3/conf/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6373:6379"
      - 16373:16379
    networks:
      redis_network:
        ipv4_address: 172.38.0.13

  redis-4:
    image: redis
    container_name: redis-4
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - redis4:/data
      - ./redis/node-4/conf/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6374:6379"
      - 16374:16379
    networks:
      redis_network:
        ipv4_address: 172.38.0.14

  redis-5:
    image: redis
    container_name: redis-5
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - redis5:/data
      - ./redis/node-5/conf/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6375:6379"
      - 16375:16379
    networks:
      redis_network:
        ipv4_address: 172.38.0.15

  redis-6:
    image: redis
    container_name: redis-6
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    volumes:
      - redis6:/data
      - ./redis/node-6/conf/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6376:6379"
      - "16376:16379"
    networks:
      redis_network:
        ipv4_address: 172.38.0.16

  redis-setup:
    container_name: redis-setup
    image: redis:latest
    depends_on:
      - redis-1
      - redis-2
      - redis-3
      - redis-4
      - redis-5
      - redis-6
    command: >
      sh -c "sleep 10 && 
      redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1 --cluster-yes"
    networks:
      - redis_network

  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "5540:5540"
    volumes:
      - redisinsight:/db
    depends_on:
      - redis-1
      - redis-2
      - redis-3
      - redis-4
      - redis-5
      - redis-6
    networks:
      - redis_network

  zookeeper:
    image: bitnami/zookeeper:3.9.1
    container_name: zookeeper
    tmpfs: "/zktmp"
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    ports:
      - "2181:2181"
    networks:
      - kafka_network

  kafka1:
    image: bitnami/kafka:3.7.0
    container_name: kafka1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_NUM_PARTITIONS: 3
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data_1:/bitnami/kafka
    networks:
      - kafka_network

  kafka2:
    image: bitnami/kafka:3.7.0
    container_name: kafka2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9093,EXTERNAL://0.0.0.0:29093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,EXTERNAL://localhost:29093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_NUM_PARTITIONS: 3
    ports:
      - "9093:9093"
      - "29093:29093"
    volumes:
      - kafka_data_2:/bitnami/kafka
    networks:
      - kafka_network

  kafka3:
    image: bitnami/kafka:3.7.0
    container_name: kafka3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9094,EXTERNAL://0.0.0.0:29094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094,EXTERNAL://localhost:29094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_NUM_PARTITIONS: 3
    ports:
      - "9094:9094"
      - "29094:29094"
    volumes:
      - kafka_data_3:/bitnami/kafka
    networks:
      - kafka_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9093,kafka3:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka_network

  postgres:
    image: postgres:16-alpine
    restart: always
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./database/multiple-database.sh:/docker-entrypoint-initdb.d/multiple-database.sh
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./database/.env
    networks:
      - hotel

  adminer:
    image: adminer
    restart: always
    ports:
      - 8084:8080
    depends_on:
      - postgres
    networks:
      - hotel

volumes:
  redisinsight:
    name: redisinsight
  redis1:
    name: redis1
  redis2:
    name: redis2
  redis3:
    name: redis3
  redis4:
    name: redis4
  redis5:
    name: redis5
  redis6:
    name: redis6
  kafka_data_1:
    name: kafka_data_1
    driver: local
  kafka_data_2:
    name: kafka_data_2
    driver: local
  kafka_data_3:
    name: kafka_data_3
    driver: local
  postgres_data:
    name: postgres_data